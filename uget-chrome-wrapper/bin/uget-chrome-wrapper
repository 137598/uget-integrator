#!/usr/bin/env python

# uget-chrome-wrapper is a tool to integrate uGet Download manager
# with Google Chrome in Linux systems.

# Copyright (C) 2016  Gobinath

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import struct
import sys
import threading
import Queue
from subprocess import call
import json
from urlparse import urlparse
from os.path import splitext, basename, join, expanduser

# Send a message to the webapp.
def send_message(message):
	# Write message size.
	sys.stdout.write(struct.pack('I', len(message)))
	# Write the message itself.
	sys.stdout.write(message)
	sys.stdout.flush()

# Read messages from the webapp.
def read_message():
	while 1:
		# Read the message length (first 4 bytes).
		text_length_bytes = sys.stdin.read(4)

		# Unpack message length as 4 byte integer.
		text_length = struct.unpack('i', text_length_bytes)[0]

		# Read the text (JSON object) of the message.
		text = sys.stdin.read(text_length).decode('utf-8')

		if text:
			send_message('{"enable": true, "ignorelist": ""}')
			data = json.loads(text)
			url = data['url']
			
			if url: 
				filename = data['filename']
				cookie = data['cookies']
				referer = data['referrer']
				if not filename:
					filename = basename(urlparse(url).path).replace("%20", " ")
				if referer:
					call(["uget-gtk", "--http-referer=" + referer, "--filename=" + filename, url])
				else:
					call(["uget-gtk", "--filename=" + filename, url])
			
			sys.exit(0)


def Main():
	read_message()


if __name__ == '__main__':
	Main()